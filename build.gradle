import com.typelead.gradle.utils.EtaRuntimeUtils
import com.typelead.gradle.utils.EtlasCommand

// Depend on local gradle-eta plugin.
buildscript {
  repositories {
    mavenLocal()

    dependencies {
      classpath 'com.typelead:gradle-eta:0.0.1-SNAPSHOT'
    }
  }
}

plugins {
  id "org.jetbrains.intellij" version "0.2.17"
}

group 'com.typelead'

apply plugin: 'java'
apply plugin: 'eta'
apply plugin: 'org.jetbrains.intellij'

ext {
  javaVersion = '1.8'
}

intellij {
  version = '2017.3'
  pluginName = 'IntelliJ-Eta'
  // Makes it easy to support multiple intellij versions.
  // If we want to set this to true, we should find a way to cross build
  // against multiple intellij versions.
  updateSinceUntilBuild = false
  instrumentCode = false
}

eta {
  useSystemEtlas = true
}

sourceCompatibility = 1.8

repositories {
  mavenCentral()
}

dependencies {
}

task buildQuick {
  doLast {
    new EtlasCommand(project, eta).build()
  }
}

task configureTestQuick {
  doLast {
    new EtlasCommand(project, eta).build()
    // TODO: Unify copy-pasta
    copy {
      from zipTree("build/etlas/dist/build/test/test.jar")
      into "build/classes/test"
    }
    testQuick.classpath += files(getEtaRuntimeClasspath())
  }
}

task testQuick(type: Test) {
  dependsOn configureTestQuick
}

task hpack(type: Exec) {
  commandLine 'hpack'
}

sandboxAddSourcesEta {
  sources = ['eta-parser']
}

task makeEtaParser(type: Exec) {
  workingDir file('eta-parser')
  commandLine = ['make', 'sources']
}

installDepsEta.dependsOn(hpack, makeEtaParser)

prepareSandbox {
  doLast {
    copyEtaRuntimeToPluginSandbox(false)
  }
}

prepareSandbox.dependsOn(compileEta)

prepareTestingSandbox {
  doLast {
    copyEtaRuntimeToPluginSandbox(true)
  }
}

prepareTestingSandbox.dependsOn(testCompileEta)

def getSandboxLibDir(Boolean test) {
  def pluginsDir = test ? "plugins-test" : "plugins"
  "${intellij.sandboxDirectory}/$pluginsDir/${intellij.pluginName}/lib/"
}

Set<File> getEtaRuntimeClasspath() {
  if (eta.etlasBinary == null) {
    throw new GradleException(
      "Cannot getEtaRuntimeClasspath, eta.etlasBinary is null; "
      + "consider running in a doLast { .. } block instead."
    )
  }
  def res = EtaRuntimeUtils.getRuntimeClasspath(project, eta, "lib:intellij-eta")
  logger.info("Using eta runtime classpath: $res")
  res
}

def copyEtaRuntimeToPluginSandbox(Boolean test) {
  def dest = getSandboxLibDir(test)
  getEtaRuntimeClasspath().forEach { dep ->
    project.copy {
      from dep.canonicalPath
      into dest
    }
  }
}

// Hack to trick junit into thinking we have java tests.
testClasses {
  dependsOn testCompileEta
  doLast {
    copy {
      from zipTree("build/etlas/dist/build/test/test.jar")
      into "build/classes/test"
    }
  }
}

task configureTest {
  dependsOn testCompileEta
  doLast {
    test.classpath += files(getEtaRuntimeClasspath())
  }
}

test {
  dependsOn configureTest
}
