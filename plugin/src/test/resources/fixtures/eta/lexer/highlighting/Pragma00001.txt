ITinline_prag ('{-#')
ITline_prag (' OPTIONS_GHC ')
ITline_prag ('-')
ITline_prag ('fglasgow')
ITline_prag ('-')
ITline_prag ('exts ')
ITline_prag ('#-}')
WHITE_SPACE ('\n')
ITinline_prag ('{-#')
ITline_prag (' ANN module (Just "A `Maybe String' annotation") ')
ITline_prag ('#-}')
WHITE_SPACE ('\n')
ITmodule ('module')
WHITE_SPACE (' ')
ITconid ('Pragma00001')
WHITE_SPACE (' ')
ITwhere ('where')
WHITE_SPACE ('\n\n')
ITinline_prag ('{-#')
ITline_prag (' ANN type Foo (Just "A `Maybe String' annotation") ')
ITline_prag ('#-}')
WHITE_SPACE ('\n')
ITdata ('data')
WHITE_SPACE (' ')
ITconid ('Foo')
WHITE_SPACE (' ')
ITequal ('=')
WHITE_SPACE (' ')
ITconid ('Push')
WHITE_SPACE (' ')
ITconid ('DIM1')
WHITE_SPACE ('\n\n')
ITtype ('type')
WHITE_SPACE (' ')
ITconid ('Vector')
WHITE_SPACE (' ')
ITvarid ('a')
WHITE_SPACE (' ')
ITequal ('=')
WHITE_SPACE (' ')
ITconid ('Pull')
WHITE_SPACE (' ')
ITconid ('DIM1')
WHITE_SPACE (' ')
ITvarid ('a')
WHITE_SPACE ('\n')
ITinline_prag ('{-#')
ITline_prag (' DEPRECATED Vector "Use Pull instead" ')
ITline_prag ('#-}')
WHITE_SPACE ('\n\n')
ITvarid ('unsafeVector')
WHITE_SPACE (' ')
ITequal ('=')
WHITE_SPACE (' ')
ITvarid ('id')
WHITE_SPACE ('\n')
ITinline_prag ('{-#')
ITline_prag (' WARNING unsafeVector "This is unsafe; I hope you know what you're doing" ')
ITline_prag ('#-}')
WHITE_SPACE ('\n')
ITinline_prag ('{-#')
ITline_prag (' INLINE unsafeVector ')
ITline_prag ('#-}')
WHITE_SPACE ('\n\n')
ITvarid ('safeVector')
WHITE_SPACE (' ')
ITequal ('=')
WHITE_SPACE (' ')
ITvarid ('id')
WHITE_SPACE ('\n')
ITinline_prag ('{-#')
ITline_prag (' NOINLINE [2]  safeVector ')
ITline_prag ('#-}')
WHITE_SPACE ('\n\n')
ITvarid ('safeVector2')
WHITE_SPACE (' ')
ITequal ('=')
WHITE_SPACE (' ')
ITvarid ('id')
WHITE_SPACE ('\n')
ITinline_prag ('{-#')
ITline_prag (' NOINLINE [~2] safeVector2 ')
ITline_prag ('#-}')
WHITE_SPACE ('\n\n')
ITvarid ('f')
WHITE_SPACE (' ')
ITdcolon ('::')
WHITE_SPACE (' ')
ITconid ('Eq')
WHITE_SPACE (' ')
ITvarid ('a')
WHITE_SPACE (' ')
ITdarrow ('=>')
WHITE_SPACE (' ')
ITvarid ('a')
WHITE_SPACE (' ')
ITrarrow ('->')
WHITE_SPACE (' ')
ITvarid ('b')
WHITE_SPACE (' ')
ITrarrow ('->')
WHITE_SPACE (' ')
ITvarid ('b')
WHITE_SPACE ('\n')
ITvarid ('f')
WHITE_SPACE (' ')
ITinteger ('0')
WHITE_SPACE (' ')
ITvarid ('x')
WHITE_SPACE (' ')
ITequal ('=')
WHITE_SPACE (' ')
ITvarid ('x')
WHITE_SPACE ('\n')
ITvarid ('f')
WHITE_SPACE (' ')
ITvarid ('a')
WHITE_SPACE (' ')
ITvarid ('x')
WHITE_SPACE (' ')
ITequal ('=')
WHITE_SPACE (' ')
ITvarid ('f')
WHITE_SPACE (' ')
IToparen ('(')
ITvarid ('a')
WHITE_SPACE (' ')
ITvarsym ('-')
WHITE_SPACE (' ')
ITinteger ('1')
ITcparen (')')
WHITE_SPACE (' ')
ITvarid ('x')
WHITE_SPACE ('\n')
ITinline_prag ('{-#')
ITline_prag (' SPECIALISE f :: Int ')
ITline_prag ('-')
ITline_prag ('> b ')
ITline_prag ('-')
ITline_prag ('> b ')
ITline_prag ('#-}')
WHITE_SPACE ('\n\n')
ITlineComment ('-- FIXME: Waiting for https://github.com/haskell-suite/haskell-src-exts/pull/112\n')
ITvarid ('g')
WHITE_SPACE (' ')
ITvarid ('x')
WHITE_SPACE (' ')
ITequal ('=')
WHITE_SPACE (' ')
ITvarid ('x')
WHITE_SPACE ('\n')
ITinline_prag ('{-#')
ITline_prag (' INLINE_CONLIKE [1] g ')
ITline_prag ('#-}')
WHITE_SPACE ('\n\n')
ITvarid ('h')
WHITE_SPACE (' ')
ITdcolon ('::')
WHITE_SPACE (' ')
ITvarid ('a')
WHITE_SPACE (' ')
ITrarrow ('->')
WHITE_SPACE (' ')
ITvarid ('a')
WHITE_SPACE ('\n')
ITvarid ('h')
WHITE_SPACE (' ')
ITvarid ('x')
WHITE_SPACE (' ')
ITequal ('=')
WHITE_SPACE (' ')
ITvarid ('x')
WHITE_SPACE ('\n')
ITinline_prag ('{-#')
ITline_prag (' SPECIALISE INLINE [~2] h :: Int ')
ITline_prag ('-')
ITline_prag ('> Int ')
ITline_prag ('#-}')
WHITE_SPACE ('\n\n')
ITvarid ('i')
WHITE_SPACE (' ')
ITvarid ('x')
WHITE_SPACE (' ')
ITequal ('=')
WHITE_SPACE (' ')
ITvarid ('x')
WHITE_SPACE ('\n')
ITinline_prag ('{-#')
ITline_prag (' ANN i (Just "Hello") ')
ITline_prag ('#-}')
WHITE_SPACE ('\n\n')
ITvarid ('map2')
WHITE_SPACE (' ')
ITequal ('=')
WHITE_SPACE (' ')
ITvarid ('map')
WHITE_SPACE ('\n')
ITinline_prag ('{-#')
ITline_prag (' RULES\n"map2/map2"    forall f g xs.  map2 f (map2 g xs) = map2 (f.g) xs\n ')
ITline_prag ('#-}')
WHITE_SPACE ('\n')
