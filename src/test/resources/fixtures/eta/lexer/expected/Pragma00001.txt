ITblockComment ('{-# OPTIONS_GHC -fglasgow-exts #-}')
WHITE_SPACE ('\n')
ITann_prag ('{-# ANN')
WHITE_SPACE (' ')
ITmodule ('module')
WHITE_SPACE (' ')
IToparen ('(')
ITconid ('Just')
WHITE_SPACE (' ')
ITstring ('"A `Maybe String' annotation"')
ITcparen (')')
WHITE_SPACE (' ')
ITclose_prag ('#-}')
WHITE_SPACE ('\n')
ITmodule ('module')
WHITE_SPACE (' ')
ITconid ('Pragma00001')
WHITE_SPACE (' ')
ITwhere ('where')
WHITE_SPACE ('\n\n')
ITvocurly ('')
ITann_prag ('{-# ANN')
WHITE_SPACE (' ')
ITtype ('type')
WHITE_SPACE (' ')
ITconid ('Foo')
WHITE_SPACE (' ')
IToparen ('(')
ITconid ('Just')
WHITE_SPACE (' ')
ITstring ('"A `Maybe String' annotation"')
ITcparen (')')
WHITE_SPACE (' ')
ITclose_prag ('#-}')
WHITE_SPACE ('\n')
ITsemi ('')
ITdata ('data')
WHITE_SPACE (' ')
ITconid ('Foo')
WHITE_SPACE (' ')
ITequal ('=')
WHITE_SPACE (' ')
ITconid ('Push')
WHITE_SPACE (' ')
ITconid ('DIM1')
WHITE_SPACE ('\n\n')
ITsemi ('')
ITtype ('type')
WHITE_SPACE (' ')
ITconid ('Vector')
WHITE_SPACE (' ')
ITvarid ('a')
WHITE_SPACE (' ')
ITequal ('=')
WHITE_SPACE (' ')
ITconid ('Pull')
WHITE_SPACE (' ')
ITconid ('DIM1')
WHITE_SPACE (' ')
ITvarid ('a')
WHITE_SPACE ('\n')
ITsemi ('')
ITdeprecated_prag ('{-# DEPRECATED')
WHITE_SPACE (' ')
ITconid ('Vector')
WHITE_SPACE (' ')
ITstring ('"Use Pull instead"')
WHITE_SPACE (' ')
ITclose_prag ('#-}')
WHITE_SPACE ('\n\n')
ITsemi ('')
ITvarid ('unsafeVector')
WHITE_SPACE (' ')
ITequal ('=')
WHITE_SPACE (' ')
ITvarid ('id')
WHITE_SPACE ('\n')
ITsemi ('')
ITwarning_prag ('{-# WARNING')
WHITE_SPACE (' ')
ITvarid ('unsafeVector')
WHITE_SPACE (' ')
ITstring ('"This is unsafe; I hope you know what you're doing"')
WHITE_SPACE (' ')
ITclose_prag ('#-}')
WHITE_SPACE ('\n')
ITsemi ('')
ITinline_prag ('{-# INLINE')
WHITE_SPACE (' ')
ITvarid ('unsafeVector')
WHITE_SPACE (' ')
ITclose_prag ('#-}')
WHITE_SPACE ('\n\n')
ITsemi ('')
ITvarid ('safeVector')
WHITE_SPACE (' ')
ITequal ('=')
WHITE_SPACE (' ')
ITvarid ('id')
WHITE_SPACE ('\n')
ITsemi ('')
ITinline_prag ('{-# NOINLINE')
WHITE_SPACE (' ')
ITobrack ('[')
ITinteger ('2')
ITcbrack (']')
WHITE_SPACE ('  ')
ITvarid ('safeVector')
WHITE_SPACE (' ')
ITclose_prag ('#-}')
WHITE_SPACE ('\n\n')
ITsemi ('')
ITvarid ('safeVector2')
WHITE_SPACE (' ')
ITequal ('=')
WHITE_SPACE (' ')
ITvarid ('id')
WHITE_SPACE ('\n')
ITsemi ('')
ITinline_prag ('{-# NOINLINE')
WHITE_SPACE (' ')
ITobrack ('[')
ITtilde ('~')
ITinteger ('2')
ITcbrack (']')
WHITE_SPACE (' ')
ITvarid ('safeVector2')
WHITE_SPACE (' ')
ITclose_prag ('#-}')
WHITE_SPACE ('\n\n')
ITsemi ('')
ITvarid ('f')
WHITE_SPACE (' ')
ITdcolon ('::')
WHITE_SPACE (' ')
ITconid ('Eq')
WHITE_SPACE (' ')
ITvarid ('a')
WHITE_SPACE (' ')
ITdarrow ('=>')
WHITE_SPACE (' ')
ITvarid ('a')
WHITE_SPACE (' ')
ITrarrow ('->')
WHITE_SPACE (' ')
ITvarid ('b')
WHITE_SPACE (' ')
ITrarrow ('->')
WHITE_SPACE (' ')
ITvarid ('b')
WHITE_SPACE ('\n')
ITsemi ('')
ITvarid ('f')
WHITE_SPACE (' ')
ITinteger ('0')
WHITE_SPACE (' ')
ITvarid ('x')
WHITE_SPACE (' ')
ITequal ('=')
WHITE_SPACE (' ')
ITvarid ('x')
WHITE_SPACE ('\n')
ITsemi ('')
ITvarid ('f')
WHITE_SPACE (' ')
ITvarid ('a')
WHITE_SPACE (' ')
ITvarid ('x')
WHITE_SPACE (' ')
ITequal ('=')
WHITE_SPACE (' ')
ITvarid ('f')
WHITE_SPACE (' ')
IToparen ('(')
ITvarid ('a')
WHITE_SPACE (' ')
ITminus ('-')
WHITE_SPACE (' ')
ITinteger ('1')
ITcparen (')')
WHITE_SPACE (' ')
ITvarid ('x')
WHITE_SPACE ('\n')
ITsemi ('')
ITspec_prag ('{-# SPECIALISE')
WHITE_SPACE (' ')
ITvarid ('f')
WHITE_SPACE (' ')
ITdcolon ('::')
WHITE_SPACE (' ')
ITconid ('Int')
WHITE_SPACE (' ')
ITrarrow ('->')
WHITE_SPACE (' ')
ITvarid ('b')
WHITE_SPACE (' ')
ITrarrow ('->')
WHITE_SPACE (' ')
ITvarid ('b')
WHITE_SPACE (' ')
ITclose_prag ('#-}')
WHITE_SPACE ('\n\n')
ITlineComment ('-- FIXME: Waiting for https://github.com/haskell-suite/haskell-src-exts/pull/112')
WHITE_SPACE ('\n')
ITsemi ('')
ITvarid ('g')
WHITE_SPACE (' ')
ITvarid ('x')
WHITE_SPACE (' ')
ITequal ('=')
WHITE_SPACE (' ')
ITvarid ('x')
WHITE_SPACE ('\n')
ITsemi ('')
ITblockComment ('{-# INLINE_CONLIKE [1] g #-}')
WHITE_SPACE ('\n\n')
ITsemi ('')
ITvarid ('h')
WHITE_SPACE (' ')
ITdcolon ('::')
WHITE_SPACE (' ')
ITvarid ('a')
WHITE_SPACE (' ')
ITrarrow ('->')
WHITE_SPACE (' ')
ITvarid ('a')
WHITE_SPACE ('\n')
ITsemi ('')
ITvarid ('h')
WHITE_SPACE (' ')
ITvarid ('x')
WHITE_SPACE (' ')
ITequal ('=')
WHITE_SPACE (' ')
ITvarid ('x')
WHITE_SPACE ('\n')
ITsemi ('')
ITspec_inline_prag ('{-# SPECIALISE INLINE')
WHITE_SPACE (' ')
ITobrack ('[')
ITtilde ('~')
ITinteger ('2')
ITcbrack (']')
WHITE_SPACE (' ')
ITvarid ('h')
WHITE_SPACE (' ')
ITdcolon ('::')
WHITE_SPACE (' ')
ITconid ('Int')
WHITE_SPACE (' ')
ITrarrow ('->')
WHITE_SPACE (' ')
ITconid ('Int')
WHITE_SPACE (' ')
ITclose_prag ('#-}')
WHITE_SPACE ('\n\n')
ITsemi ('')
ITvarid ('i')
WHITE_SPACE (' ')
ITvarid ('x')
WHITE_SPACE (' ')
ITequal ('=')
WHITE_SPACE (' ')
ITvarid ('x')
WHITE_SPACE ('\n')
ITsemi ('')
ITann_prag ('{-# ANN')
WHITE_SPACE (' ')
ITvarid ('i')
WHITE_SPACE (' ')
IToparen ('(')
ITconid ('Just')
WHITE_SPACE (' ')
ITstring ('"Hello"')
ITcparen (')')
WHITE_SPACE (' ')
ITclose_prag ('#-}')
WHITE_SPACE ('\n\n')
ITsemi ('')
ITvarid ('map2')
WHITE_SPACE (' ')
ITequal ('=')
WHITE_SPACE (' ')
ITvarid ('map')
WHITE_SPACE ('\n')
ITsemi ('')
ITrules_prag ('{-# RULES')
WHITE_SPACE ('\n')
ITsemi ('')
ITstring ('"map2/map2"')
WHITE_SPACE ('    ')
ITforall ('forall')
WHITE_SPACE (' ')
ITvarid ('f')
WHITE_SPACE (' ')
ITvarid ('g')
WHITE_SPACE (' ')
ITvarid ('xs')
ITdot ('.')
WHITE_SPACE ('  ')
ITvarid ('map2')
WHITE_SPACE (' ')
ITvarid ('f')
WHITE_SPACE (' ')
IToparen ('(')
ITvarid ('map2')
WHITE_SPACE (' ')
ITvarid ('g')
WHITE_SPACE (' ')
ITvarid ('xs')
ITcparen (')')
WHITE_SPACE (' ')
ITequal ('=')
WHITE_SPACE (' ')
ITvarid ('map2')
WHITE_SPACE (' ')
IToparen ('(')
ITvarid ('f')
ITdot ('.')
ITvarid ('g')
ITcparen (')')
WHITE_SPACE (' ')
ITvarid ('xs')
WHITE_SPACE ('\n ')
ITclose_prag ('#-}')
WHITE_SPACE ('\n')
ITsemi ('')