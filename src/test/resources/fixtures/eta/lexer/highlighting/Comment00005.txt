ITmodule ('module')
WHITE_SPACE (' ')
ITconid ('Comment00005')
WHITE_SPACE (' ')
ITwhere ('where')
WHITE_SPACE ('\n\n')
ITvarid ('z')
WHITE_SPACE (' ')
ITequal ('=')
WHITE_SPACE (' ')
ITinteger ('2')
WHITE_SPACE ('\n\n')
ITblockComment ('{-')
ITblockComment ('\nThis function implements double buffering of state for imnmutable\nseqential loops (forLoop and whileLoop).  The intention is to generate\nthe minimal amount of copying (especially deep array copies) while\nalso avoiding frequent references to data that can not be allocated in\nregisters.\n\nThe state of the loop is implemented by two variables so that the\nloop body reads from one and writes to the other. At the end of the\nbody, the contents of the second (write) variable is shallow copied to\nthe first (read) variable. In order to avoid inadvertent sharing of\ndata referenced by pointers in the variables (array buffers, for\ninstance), the pointers in the state are swapped rather than just\ncopied so that the end up in the variable written to. Finally the read\nvariable is shallow copied to the result location.\n\nThere are some simplifying cases:\n    ')
ITblockComment ('-')
ITblockComment (' When the target lvalue loc is a variable, and thus cheap to\n      access, it is reused as the read state variable\n    ')
ITblockComment ('-')
ITblockComment (' When the type of the state is scalar, so that assignment is\n      atomic, only one state variable is used and it is both read and\n      written to in the loop body, eliminating the shallow copy in the\n      loop body.\nThe strategy implemented a com promise between different design constraints:\n    ')
ITblockComment ('-')
ITblockComment (' Avoid deep copying of arrays (that is what the double buffering is for)\n    ')
ITblockComment ('-')
ITblockComment (' Avoid shallow copying if possible\n    ')
ITblockComment ('-')
ITblockComment (' Avoid memory leaks of arrays and ivars\n')
ITblockComment ('-}')
WHITE_SPACE ('\n\n')
ITvarid ('f')
WHITE_SPACE (' ')
ITdcolon ('::')
WHITE_SPACE (' ')
ITconid ('Int')
WHITE_SPACE (' ')
ITrarrow ('->')
WHITE_SPACE (' ')
ITconid ('Int')
WHITE_SPACE ('\n')
ITvarid ('f')
WHITE_SPACE (' ')
ITvarid ('x')
WHITE_SPACE (' ')
ITequal ('=')
WHITE_SPACE (' ')
ITvarid ('y')
WHITE_SPACE ('\n\n')
